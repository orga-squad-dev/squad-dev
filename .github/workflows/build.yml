name: Build

on:
  push:
    branches:
      - main
      - develop
      - 'features/**'
  workflow_dispatch:
    inputs:
      existVersion:
        description: 'Existing version to deploy'

jobs:

  checkout:
    name: Get sources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/upload-artifact@v2
        with:
          name: sources
          path: ./

      - run: echo ${{ github.repository_owner }} - ${{ github.repository }} - ${{ github.project_id }}
    
  build:
    name: Create build
    needs: checkout
    runs-on: ubuntu-latest
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./
      
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - run: npm install
      - run: npm test
      - run: npm run build


      - name: List files
        run: ls -lah
        
  #QG:
  #  name: SonarCloud
  #  needs: build
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/checkout@v2
  #      with:
  #        # Shallow clones should be disabled for a better relevancy of analysis
  #        fetch-depth: 0
  #    - name: Scan
  #      uses: SonarSource/sonarcloud-github-action@master
  #      with:
  #        projectBaseDir: ./src/
  #        args: >
  #          -Dsonar.organization=orga-squad-dev
  #          -Dsonar.projectKey=orga-squad-dev_squad-dev 
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  version:
    name: Bump version
    needs: checkout
    runs-on: ubuntu-latest
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./
      
      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.0.6
      # From now you can access the version
      - name: Print version
        run: echo ${{ steps.extract_version.outputs.version }}

      - name: Extract branch name
        shell: bash
        run: |
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        id: extract_branch

      - name: Test branch_name
        run: echo ${{ env.branch_name }}

      - name: Feature name
        run: |
          if [[ ${{ env.branch_name }} =~ "feature/" ]]; then
            echo "::set-output name=feature::bug"
          fi
          if [[ ${{ env.branch_name }} == "main" ]]; then
            echo "::set-output name=feature::feature"
          fi
        id: feature_name

      - name: Bump release version
        id: bump_version
        uses: christian-draeger/increment-semantic-version@1.0.2
        with:
          current-version: ${{ steps.extract_version.outputs.version }}
          version-fragment: ${{ steps.feature_name.outputs.feature }}
      - name: Do something with your bumped release version
        run: echo ${{ steps.bump_version.outputs.next-version }} on ${{ steps.extract_branch.outputs.branch }}

      - name: Image name
        run: |
          echo *** Branch name *** : ${{ env.branch_name }} / ${{steps.extract_version.outputs.version}}
          if [[ ${{ env.branch_name }} =~ "feature/" || ${{ env.branch_name }} =~ "develop" ]]; then
            #echo "::set-output name=tag::${steps.extract_version.outputs.version}-${steps.extract_branch.outputs.branch}"
            echo "tag=${steps.extract_version.outputs.version}-${steps.extract_branch.outputs.branch}" >> $GITHUB_ENV
          fi
          if [[ ${{ env.branch_name }} == "main" ]]; then
            #echo "::set-output name=tag::${{steps.extract_version.outputs.version}}"
            echo "tag=${{steps.extract_version.outputs.version}}" >> $GITHUB_ENV
          fi
        id: image_name

      #- name: Image name
      #  run: echo ${{ steps.feature_name.outputs.feature }} - ${{ steps.tag_name.outputs.tag }}

  build-image:
    name: Build docker image
    needs: version
    runs-on: ubuntu-latest
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./

      #- name: docker login
      #  env:
      #    DOCKER_USER: ${{ secrets.DOCKER_USER }}
      #    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      #    repository: ${{ secrets.DOCKER_APP }}:${{ env.tag }} # jetenow/squaddev ==  image_name
      #    tags: latest, ${{ secrets.DOCKER_TOKEN }}
      #  run: |
      #    docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

      #- name: push image to ghcr.io
      #  uses: redhat-actions/push-to-registry@v2
      #  with:
      #    image: ${{ steps.build-image.outputs.image }}
      #    tags: ${{ steps.build-image.outputs.tags }}
      #    registry: ghcr.io
      #    username: ${{ github.actor }}
      #    password: ${{ secrets.GITHUB_TOKEN }}

      
      
      #
      #- name: Log in to registry
      #  run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#
      #- name: Build image
      #  run: docker build -t ghcr.io/${{ github.repository }}/squaddev:${{ env.tag }} .
      #  #run: docker build -t jetenow/squaddev:${{ env.tag }} .
#
      #- name: Push image
      #  run: |
      #    IMAGE_ID=ghcr.io/${{ github.repository_owner }}/squaddev
#
      #    docker tag squaddev $IMAGE_ID:${{ env.tag }}
      #    docker push $IMAGE_ID:${{ env.tag }}


      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      #- name: Set up Docker Buildx
      #  uses: docker/setup-buildx-action@v1
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: jetenow/squaddev:latest

  prod:
    name: PROD
    needs: [build-image, version]
    runs-on: ubuntu-latest
    steps:
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST_PROD }}
        username: ${{ secrets.USERNAME_PROD }}
        password: ${{ secrets.PASSWORD_PROD }}
        port: ${{ secrets.PORT_PROD }}
        script: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/squaddev

          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          docker pull $IMAGE_ID:${{ env.tag }}
          docker run -p 3000:80 -it $IMAGE_ID:${{ env.tag }}



    