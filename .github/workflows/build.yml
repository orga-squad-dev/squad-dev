name: Build

on:
  push:
    branches:
      - main

jobs:

  checkout:
    name: Get sources
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: actions/upload-artifact@v2
        with:
          name: sources
          path: ./

  build:
    name: Create build
    needs: checkout
    runs-on: ubuntu-latest
    steps: 

      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - run: npm install
      - run: npm test
      - run: npm run build

      - name: List files
        run: ls -lah

      - uses: actions/upload-artifact@v2
        with:
          name: sources
          path: |
            ./
            !node_modules/

  build-image:
    name: Build docker image
    needs: [build]
    runs-on: ubuntu-latest
    steps:

      - uses: actions/download-artifact@v2
        with:
          name: sources
          path: ./

      - name: List files
        run: ls -lah

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: |
          echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        id: extract_branch

      - name: Determine tag
        run: |
          if [[ ${{ env.branch_name }} =~ "develop" ]]; then
            echo "::set-output name=tag::r7"
          fi
          if [[ ${{ env.branch_name }} == "main" ]]; then
            echo "::set-output name=tag::latest"
          fi
        id: tag_name

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/squaddev:${{ steps.tag_name.outputs.tag }}

  prod:
    name: PROD
    needs: build-image
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }} || ${{contains(github.base_ref, 'main')}}
    steps:
      - name: SSH on PROD
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME_PROD }}
          password: ${{ secrets.PASSWORD_PROD }}
          port: ${{ secrets.PORT_PROD }}
          script: |
            echo Login
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

            echo Delete image
            docker rm -f $(docker ps -a | grep squaddev | awk '{print $1}')

            echo Pull image
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/squaddev:latest

            echo Run new one
            docker run -d -p 3000:80 --name squaddev ${{ secrets.DOCKERHUB_USERNAME }}/squaddev:latest